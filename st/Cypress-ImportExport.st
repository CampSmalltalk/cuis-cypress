Object subclass: #CypressPackageWriter	instanceVariableNames: 'packageStructure rootDirectory packageDirectory'	classVariableNames: ''	poolDictionaries: ''	category: 'Cypress-AmberFileServer'!!CypressPackageWriter methodsFor: 'private' stamp: 'dkh 4/22/2012 13:24:15'!directoryForDirectoryNamed: directoryNameOrPath    ^ directoryNameOrPath = '.'        ifTrue: [ self packageDirectory assureExistence ]        ifFalse: [ | dir |            dir := self packageDirectory directoryNamed: directoryNameOrPath.            dir assureExistence.            dir  ]! !!CypressPackageWriter methodsFor: 'private' stamp: 'dkh 4/22/2012 13:24:15'!fileNameForSelector: selector    ^ selector last = $:        ifTrue: [             selector                collect: [ :each |                     each = $:                        ifTrue: [ $. ]                        ifFalse: [ each ] ] ]        ifFalse: [             selector first isLetter                ifTrue: [ selector ]                ifFalse: [                     | output specials |                    specials := self class specials.                    output := String new writeStream.                    output nextPut: $^.                    selector do: [ :each | output nextPutAll: (specials at: each) ] separatedBy: [ output nextPut: $. ].                    output contents ] ]! !!CypressPackageWriter methodsFor: 'private' stamp: 'dkh 4/22/2012 13:24:15'!writeInDirectoryName: directoryNameOrPath fileName: fileName extension: ext visit: visitBlock    | directory |    directory := self directoryForDirectoryNamed: directoryNameOrPath.    directory        forceNewFileNamed: fileName , ext        do: [ :file |             file lineEndConvention: #'lf'.            visitBlock value: file ]! !!CypressPackageWriter methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!packageDirectory	packageDirectory 		ifNil: [ 			packageDirectory := self rootDirectory directoryNamed: self packageStructure name.			packageDirectory assureExistence ].	^packageDirectory! !!CypressPackageWriter methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!packageDirectory: aPackageDirectory	packageDirectory := aPackageDirectory! !!CypressPackageWriter methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!packageStructure	^packageStructure! !!CypressPackageWriter methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!packageStructure: aCypressPackageStructure	packageStructure := aCypressPackageStructure! !!CypressPackageWriter methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!rootDirectory	^rootDirectory! !!CypressPackageWriter methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!rootDirectory: aDirectory	rootDirectory := aDirectory! !!CypressPackageWriter methodsFor: 'writing' stamp: 'dkh 4/22/2012 13:24:15'!write	self packageDirectory exists        ifTrue: [ self packageDirectory recursiveDelete ].    	self writePropertiesFile.	self writePackageStructure! !!CypressPackageWriter methodsFor: 'writing' stamp: 'dkh 4/22/2012 13:24:15'!writeClassComment: classStructure on: fileStream    fileStream nextPutAll: classStructure comment withUnixLineEndings! !!CypressPackageWriter methodsFor: 'writing' stamp: 'dkh 4/22/2012 13:24:15'!writeClassStructure: classStructure on: fileStream    | properties |    properties := Dictionary new.    properties at: 'name' put: classStructure className.    properties at: 'super' put: classStructure superclassName.    properties at: 'instvars' put: classStructure instanceVariableNames.    properties at: 'classinstvars' put: classStructure classInstanceVariableNames.    properties writeCypressJsonOn: fileStream! !!CypressPackageWriter methodsFor: 'writing' stamp: 'dkh 4/22/2012 13:24:15'!writeClassStructure: classStructure to: classPath    self        writeInDirectoryName: classPath        fileName: 'README'        extension: '.md'        visit: [:fileStream | self writeClassComment: classStructure on: fileStream ].    self        writeInDirectoryName: classPath        fileName: 'properties'        extension: '.json'        visit: [:fileStream | self writeClassStructure: classStructure on: fileStream ]! !!CypressPackageWriter methodsFor: 'writing' stamp: 'dkh 4/22/2012 13:24:15'!writeExtensionClassStructure: classStructure to: classPath     self        writeInDirectoryName: classPath        fileName: 'properties'        extension: '.json'        visit: [:fileStream |  | properties |    		properties := Dictionary new.    		properties at: 'name' put: classStructure className.    		properties writeCypressJsonOn: fileStream ]! !!CypressPackageWriter methodsFor: 'writing' stamp: 'dkh 4/22/2012 13:24:15'!writeMethodStructure: methodStructure to:methodPath    | filename |    filename := self fileNameForSelector: methodStructure selector.    self        writeInDirectoryName: methodPath        fileName: filename        extension: '.st'        visit: [:fileStream |		fileStream        		nextPutAll: methodStructure category;        		lf;        		nextPutAll: methodStructure source withUnixLineEndings ]! !!CypressPackageWriter methodsFor: 'writing' stamp: 'dkh 4/22/2012 13:24:15'!writePackageStructure	self writePackageStructureClasses:  self packageStructure classes isClassExtension: false.	self writePackageStructureClasses:  self packageStructure extensions isClassExtension: true! !!CypressPackageWriter methodsFor: 'writing' stamp: 'dkh 4/22/2012 13:24:15'!writePackageStructureClasses:  classStructures isClassExtension: isClassExtension    | classDirExtension |	    classDirExtension := isClassExtension		ifTrue: [ '.extension' ]		ifFalse: [ '.class' ].    classStructures        do: [ :classStructure |             | classPath instanceMethodPath classMethodPath |            classPath := classStructure className , classDirExtension , FileDirectory slash.	      isClassExtension			ifTrue: [ self writeExtensionClassStructure: classStructure to: classPath ]            	ifFalse: [ self writeClassStructure: classStructure to: classPath ].            instanceMethodPath := classPath , 'instance' , FileDirectory slash.            classStructure instanceMethods                do: [ :methodStructure |  self writeMethodStructure: methodStructure to: instanceMethodPath ].            classMethodPath := classPath , 'class' , FileDirectory slash.            classStructure classMethods                do: [ :methodStructure |  self writeMethodStructure: methodStructure to: classMethodPath ] ].! !!CypressPackageWriter methodsFor: 'writing' stamp: 'dkh 4/22/2012 13:24:15'!writePropertiesFile    self        writeInDirectoryName: '.'        fileName: 'properties'        extension: '.json'        visit: [:fileStream | Dictionary new writeCypressJsonOn: fileStream ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CypressPackageWriter class	instanceVariableNames: 'specials'!!CypressPackageWriter class methodsFor: 'as yet unclassified' stamp: 'dkh 4/22/2012 13:24:15'!initializeSpecials    | map |    map := Dictionary new.    map        at: $+ put: 'plus';        at: $- put: 'minus';        at: $= put: 'equals';        at: $< put: 'less';        at: $> put: 'more';        at: $% put: 'percent';        at: $& put: 'and';        at: $| put: 'pipe';        at: $* put: 'star';        at: $/ put: 'slash';        at: $\ put: 'backslash';        at: $~ put: 'tilde';        at: $? put: 'wat';        at: $@ put: 'at'.    map keys do: [ :key | map at: (map at: key) put: key ].    ^ map! !!CypressPackageWriter class methodsFor: 'as yet unclassified' stamp: 'dkh 4/22/2012 13:24:15'!specials    ^ specials ifNil: [ specials := self initializeSpecials ]! !!CypressPackageWriter class methodsFor: 'instance creation' stamp: 'dkh 4/22/2012 13:24:15'!writePackageStructure: aPackageStructure to: aPackagesDirectory	self new		packageStructure: aPackageStructure;		rootDirectory: aPackagesDirectory;		write! !AmberServerControl subclass: #CypressAmberServerControl	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Cypress-AmberFileServer'!!CypressAmberServerControl methodsFor: 'building' stamp: 'dkh 4/22/2012 13:24:15'!buildControls	| builder content |	builder := UITheme builder.	content := (builder newColumn: {		builder newLabelFor: self getLabel: #getServerStatus getEnabled: nil.		builder newLabelGroup: {			'Port'->(builder newTextEntryFor: self getText: #port setText: #port: help: '').			}.		(builder newRow: {			builder newButtonFor: self action: #startServer label: 'Start server' help: ''.			builder newButtonFor: self action: #stopServer label: 'Stop server' help: ''.		})		vResizing: #spaceFill.	}).	^ content 			width: 750;			height: 120! !!CypressAmberServerControl methodsFor: 'callbacks' stamp: 'dkh 4/22/2012 13:24:15'!getServerStatus	^ super getServerStatus, '  with root: ', (FileDirectory default directoryNamed: self amberRootDir) fullName asString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CypressAmberServerControl class	instanceVariableNames: ''!Object subclass: #CypressPackageReader	instanceVariableNames: 'packageDirectory packageStructure properties'	classVariableNames: ''	poolDictionaries: ''	category: 'Cypress-AmberFileServer'!!CypressPackageReader methodsFor: 'private' stamp: 'dkh 4/22/2012 13:24:15'!classStructureFrom: classPropertiesDict 	^(CypressClassStructure new)		isClassExtension: true;		properties: classPropertiesDict;		yourself! !!CypressPackageReader methodsFor: 'private' stamp: 'dkh 4/22/2012 13:24:15'!classStructureFrom: classPropertiesDict comment: classComment.	^(self classStructureFrom: classPropertiesDict)		isClassExtension: false;		comment: classComment;		yourself! !!CypressPackageReader methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!packageDirectory	^packageDirectory! !!CypressPackageReader methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!packageDirectory: aDirectory	packageDirectory := aDirectory! !!CypressPackageReader methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!packageStructure	^packageStructure! !!CypressPackageReader methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!packageStructure: aPackageStructure	packageStructure := aPackageStructure! !!CypressPackageReader methodsFor: 'reading' stamp: 'dkh 4/22/2012 13:24:15'!read    	self readPropertiesFile.	self readPackageStructure! !!CypressPackageReader methodsFor: 'reading' stamp: 'dkh 4/22/2012 13:24:15'!readClassStructureFromEntry: classEntry    | classDirectory classPropertiesDict classComment entries classStructure |    classDirectory := classEntry asFileDirectory.    ((entries := classDirectory entries) detect: [ :entry | entry name = 'properties.json' ] ifNone: [  ])        ifNotNil: [ :propertyEntry | propertyEntry readStreamDo: [ :fileStream | classPropertiesDict := MCFileTreeJsonParser parseStream: fileStream ] ].    (entries detect: [ :entry | entry name = 'README.md' ] ifNone: [  ])        ifNotNil: [ :commentEntry | commentEntry readStreamDo: [ :fileStream | classComment := fileStream contents ] ].    classStructure := self classStructureFrom: classPropertiesDict comment: classComment.    self readMethodStructureFor: classStructure in: entries.	^classStructure! !!CypressPackageReader methodsFor: 'reading' stamp: 'dkh 4/22/2012 13:24:15'!readExtensionClassStructureFromEntry: classEntry    | classDirectory classPropertiesDict classComment entries classStructure |    classDirectory := classEntry asFileDirectory.    ((entries := classDirectory entries) detect: [ :entry | entry name = 'properties.json' ] ifNone: [  ])        ifNotNil: [ :propertyEntry | propertyEntry readStreamDo: [ :fileStream | classPropertiesDict := MCFileTreeJsonParser parseStream: fileStream ] ].    classStructure := self classStructureFrom: classPropertiesDict.    self readMethodStructureFor: classStructure in: entries.	^classStructure! !!CypressPackageReader methodsFor: 'reading' stamp: 'dkh 4/22/2012 13:24:15'!readMethodStructureFor: classStructure in: entries    entries        do: [ :entry |             | methods isMeta |		isMeta := false. 		methods := entry name = 'class'                ifTrue: [ 			isMeta := true.			classStructure classMethods ]		    ifFalse: [ classStructure instanceMethods ].            (entry name = 'instance' or: [ entry name = 'class' ])                ifTrue: [                     (entry asFileDirectory entries select: [ :each | each name endsWith: '.st' ])                        do: [ :methodEntry |                             methodEntry                                readStreamDo: [ :fileStream |                                     | category source selector |                                    category := fileStream nextLine.                                    source := fileStream upToEnd.						selector := Parser new parseSelector: source.                                     methods 							at: selector							put: ((CypressMethodStructure new)									name: selector;									isMetaclass: isMeta;									selector: selector;									category: category;									source: source;									yourself) ] ] ] ]! !!CypressPackageReader methodsFor: 'reading' stamp: 'dkh 4/22/2012 13:24:15'!readPackageStructure   packageStructure := CypressPackageStructure new name: self packageDirectory localName.   self packageDirectory entries        do: [ :entry |             (entry name endsWith: '.class')                ifTrue: [ self packageStructure classes add: (self readClassStructureFromEntry: entry) ].            (entry name endsWith: '.extension')                ifTrue: [ self packageStructure extensions add: (self readExtensionClassStructureFromEntry: entry) ] ]! !!CypressPackageReader methodsFor: 'reading' stamp: 'dkh 4/22/2012 13:24:15'!readPropertiesFile		self packageDirectory 		readOnlyFileNamed: 'properties.json'		do: [:fileStream |			properties := MCFileTreeJsonParser parseStream: fileStream ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CypressPackageReader class	instanceVariableNames: ''!!CypressPackageReader class methodsFor: 'instance creation' stamp: 'dkh 4/22/2012 13:24:15'!readPackageStructureFrom: aPackagesDirectory	^(self new)		packageDirectory: aPackagesDirectory;		read;		yourself! !ZnAmberFileServerDelegate subclass: #ZnCypressFileServerDelegate	instanceVariableNames: 'packagePaths'	classVariableNames: ''	poolDictionaries: ''	category: 'Cypress-AmberFileServer'!!ZnCypressFileServerDelegate methodsFor: 'private' stamp: 'dkh 4/22/2012 13:24:15'!actualFilenameFor: uri		^(super actualFilenameFor: uri) ifNil: [		self notifyAmberFailedGetIn: uri printString message: 'file not found'.		nil]! !!ZnCypressFileServerDelegate methodsFor: 'private' stamp: 'dkh 4/22/2012 13:24:15'!handlePackageGet: request	| reader packageDir |	packageDir := self packageDirectoryFor: request.	packageDir exists 		ifFalse: [ 			self notifyAmberFailedGetIn: packageDir fullName message: 'Directory does not exist'. 			^ZnResponse serverError: 'Directory does not exist' ].	reader := CypressPackageReader readPackageStructureFrom: packageDir.	^ZnResponse ok: (ZnStringEntity html: reader packageStructure asCypressJson)! !!ZnCypressFileServerDelegate methodsFor: 'private' stamp: 'dkh 4/22/2012 13:24:15'!handlePackagePut: request	| packageDir packageStructure |	[		packageStructure := CypressPackageStructure fromJson: request entity string.		CypressPackageWriter 			writePackageStructure: packageStructure			to: (packageDir := self packageDirectoryFor: request)]				on: Error				do: [:ex | self halt.					self notifyAmberFailed: 'PUT' in: packageDir fullName message: ex messageText.					^ZnResponse serverError: ex messageText ].	self notifyAmberCommitIn: packageDir fullName, '/', packageStructure name.	^ZnResponse created: request uri! !!ZnCypressFileServerDelegate methodsFor: 'private' stamp: 'dkh 4/22/2012 13:24:15'!packageDirectoryFor: request	| path |	path := request uri path.	path := path copyFrom:self cypressPackageTag size + 1 to: path size.	^FileDirectory on: self directory fullName, FileDirectory slash, path.! !!ZnCypressFileServerDelegate methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!cypressPackageTag	^'CYPRESS_PACKAGE'! !!ZnCypressFileServerDelegate methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!packagePaths	packagePaths ifNil: [ packagePaths := OrderedCollection withAll: #( 'packages' 'tests/scratch' 'tests/packages' ) ].	^packagePaths! !!ZnCypressFileServerDelegate methodsFor: 'accessing' stamp: 'dkh 4/22/2012 13:24:15'!packagePaths: aCollection	packagePaths := aCollection! !!ZnCypressFileServerDelegate methodsFor: 'public' stamp: 'dkh 4/22/2012 13:24:15'!handlePackageRequest: request 	^ request method = #PUT		ifTrue: [ self handlePackagePut: request ]	      ifFalse: [ self handlePackageGet: request]! !!ZnCypressFileServerDelegate methodsFor: 'public' stamp: 'dkh 4/22/2012 13:24:15'!handleRequest: request	| uri |	Transcript show: '.'.	uri := request uri.	uri pathSegments ~~ nil 		ifTrue: [ 			(uri path beginsWith: self cypressPackageTag) 				ifTrue:  [^self handlePackageRequest: request  ]].	^ super handleRequest: request! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ZnCypressFileServerDelegate class	instanceVariableNames: ''!!ZnCypressFileServerDelegate class methodsFor: 'class initialization' stamp: 'dkh 4/22/2012 13:24:15'!initialize	"self initialize"		AmberServer serverDelegate: self! !ZnCypressFileServerDelegate initialize!